# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = []
c['slaves'].append(BuildSlave("ola-pi-armv6l-noopenslp-1", "ola"))
c['slaves'].append(BuildSlave("ola-pi-armv6l-withopenslp-1", "ola"))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://code.google.com/p/open-lighting/',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'buildcheck' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=[
                              "buildcheck-ola-pi-armv6l-noopenslp",
                              "buildcheck-ola-pi-armv6l-withopenslp"]))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=[
                              "buildcheck-ola-pi-armv6l-noopenslp",
                              "buildcheck-ola-pi-armv6l-withopenslp"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='https://code.google.com/p/open-lighting/'))
factory.addStep(ShellCommand(command=["autoreconf", "-i"]))
#Should be able to switch to these with newer versions of buildbot
#factory.addStep(Configure(command=["./configure", "--enable-e133", "--enable-rdm-tests", "--enable-python-libs", "--enable-java-libs"]))
#factory.addStep(Configure(command=["./configure", "--enable-e133", "--enable-rdm-tests", "--enable-python-libs"]))
#factory.addStep(Compile(command=["make"]))
#factory.addStep(Compile(command=["make", "check"]))
factory.addStep(ShellCommand(
                  command=["./configure", "--enable-e133", "--enable-rdm-tests",
                           "--enable-python-libs"],
                  description=["configuring"],
                  descriptionDone=["configure"]))
factory.addStep(ShellCommand(
                  command=["make"],
                  description=["compiling"],
                  descriptionDone=["compile"]))
factory.addStep(ShellCommand(
                  command=["make", "check"],
                  description=["checking"],
                  descriptionDone=["checks"]))

from buildbot.config import BuilderConfig

c['builders'] = []

#Pi armv61 No OpenSLP
c['builders'].append(
    BuilderConfig(name="buildcheck-ola-pi-armv6l-noopenslp",
      slavenames=["ola-pi-armv6l-noopenslp-1"],
      factory=factory))

#Pi armv61 With OpenSLP
c['builders'].append(
    BuilderConfig(name="buildcheck-ola-pi-armv6l-withopenslp",
      slavenames=["ola-pi-armv6l-withopenslp-1"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("ola","ola")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(
                          http_port=8010,
                          authz=authz_cfg,
                          revlink="https://code.google.com/p/open-lighting/source/detail?r=%s",))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.freenode.org",
                             nick="OLA-buildbot",
                             allowForce=True,
                             channels=["#openlighting"]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "OLA"
c['titleURL'] = "http://www.opendmx.net/index.php/OLA"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.openlighting.org/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
